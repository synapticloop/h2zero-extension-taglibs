package synapticloop.sample.h2zero.mysql.counter;

//        - - - - thoughtfully generated by synapticloop h2zero - - - -        
//          with the use of synapticloop templar templating language
//                 (/java/counter/java-create-counter.templar)

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.sql.*;

import com.synapticloop.h2zero.base.manager.mysql.ConnectionManager;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import synapticloop.sample.h2zero.mysql.model.util.Constants;

import com.synapticloop.h2zero.base.sql.nolimitoffset.Counter;

/**
 * <p>The UserPetCounter contains all counters that are defined
 * in the h2zero file for the <code>user_pet</code> table.  These counters
 * are defined either in the <code>"finders"</code> or the <code>"fieldFinders"</code>
 * JSON array keys.</p>
 * 
 * <p><string>IMPORTANT:</strong> A counter will only ever return a simple integer 
 * (i.e. the count) response from any query.</p>
 * 
 * 
* <p>To execute any counter SQL query, you may optionally pass in a connection, and execute it (silently if desired)</p>
 *
 * <p><strong><em>Executing a counter without a passed in connection.</em></strong></p>
 *
 * <pre>UserPetCounter.counterName(parameter1, parameter2, ...)
 *          .execute();
 * </pre>
 *
 * <p><strong><em>Executing a counter WITH a passed in connection.</em></strong></p>
 *
 * <pre>UserPetCounter.counterName(parameter1, parameter2, ...)
 *          .withConnection(connection)
 *          .execute();
 *  </pre>
 *
 * <p><strong><em>Executing a counter WITHOUT a passed in connection SILENTLY
 * (i.e. All Exceptions are silently swallowed and logged as an error through
 * the logger.)</em></strong></p>
 *
 * <pre>UserPetCounter.counterName(parameter1, parameter2, ...)
 *          .executeSilent();
 * </pre>
 *
 * <p><strong><em>Executing a counter WITH a passed in connection SILENTLY
 * (i.e. All Exceptions are silently swallowed and logged as an error through
 * the logger.)</em></strong></p>
 *
 * <pre>UserPetCounter.counterName(parameter1, parameter2, ...)
 *          .withConnection(connection)
 *          .executeSilent();
 * </pre>
 *
 * @author synapticloop h2zero
 * 
 * <p>@see <a href="https://github.com/synapticloop/h2zero">Synapticloop h2zero GitHub repository</a></p>
 */
public class UserPetCounter {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.USER_PET_BINDER;

	private static final Logger LOGGER = LoggerFactory.getLogger(UserPetCounter.class);


	private static final String SQL_BUILTIN_COUNT_ALL = "select count(*) from user_pet";



	private UserPetCounter() {}

	/**
	 * <p>Create a counter for the <code>UserPet</code> database	 * table that will count all results.</p>
	 * 
	 * <p>This will return a Counter object, to execute the counter, either call</p>
	 * 
	 * <ul>
	 *   <li><code>counter.execute();</code> to execute the counter with exceptions thrown</li>
	 *   <li><code>counter.executeSilent();</code> to execute the counter no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>UserPetCounter.countAll()
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>UserPetCounter.countAll()
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * @return the Counter ready to be executed 
	 */
	public static Counter<Integer> countAll() {
	return(
		new Counter<>(
				LOGGER,
				SQL_BUILTIN_COUNT_ALL));
	}

}